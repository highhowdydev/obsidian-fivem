import "dotenv/config";
import fs from "node:fs";
import path from "node:path";
import ora from "ora";
import { writeFile, sanitizePath, getServerConfig } from "../utils.js";

const cfgPath = sanitizePath(path.join(process.cwd(), "server.cfg"));

function generateConfig() {
	const spinner = ora("Generating server config...").start();

	try {
		ensureEnv();
		if (fs.existsSync(cfgPath)) fs.rmSync(cfgPath, { force: true });
		const { server, server_tags, resources, groups, extras } = getServerConfig();

		let cfg = `# This server configuration was automatically generated.\n`;
		cfg += `# Do not edit this file directly, it will be overwritten.\n`;
		cfg += `# Use server.yaml + .env files to make changes.\n\n`;

		cfg += `endpoint_add_tcp "0.0.0.0:30120"\n`;
		cfg += `endpoint_add_udp "0.0.0.0:30120"\n`;

		cfg += `\n# Server database\n`;
		cfg += `set database_url "${process.env.DATABASE_URL}"\n`;
		cfg += `set database_name "${process.env.DATABASE_NAME}"\n`;

		cfg += `\n# Server resources\n`;
		cfg += resources?.map(resource => `ensure ${resource}\n`).join("");

		cfg += `\n# Server Groups\n`;
		cfg += generateGroupConfig(groups);

        cfg += `\n# Server properties\n`
        cfg += `sv_scriptHookAllowed 0\n`;
        cfg += `sv_hostname "${server.name}"\n`;
		cfg += `sets sv_projectName "${server.project_name}"\n`;
		cfg += `sets sv_projectDesc "${server.project_desc}"\n`;
		cfg += `sets locale "${server.locale}"\n`;
		cfg += `sets tags "${server_tags.join(", ")}"\n`;
		cfg += `sv_maxclients ${server.max_clients}\n`;
		cfg += `sv_enforceGameBuild ${server.game_build}\n`;
		cfg += `set mode "${server.mode}"\n`;
        cfg += `sets banner_detail "${server.banner_detail}"\n`;
        cfg += `sets banner_connecting "${server.banner_connecting}"\n`;

        cfg += `\n# Server extras\n`;
        cfg += extras?.join("\n");

        cfg += `\n\n# Keys\n`
        cfg += `set steam_webApiKey "${process.env.STEAM_WEB_API_KEY}"\n`;
        cfg += `set sv_licenseKey "${process.env.CFX_LICENSE_KEY}"\n`;

		writeFile(cfgPath, cfg);
		spinner.succeed("Server config generated successfully.");
	} catch (error) {
		console.error(error);
		spinner.fail("Failed to generate server config.");
		process.exit(1);
	}
}

function generateGroupConfig(groups) {
    let cfg = ``
    groups.forEach(group => {
		for (const allow of group.allow) {
			cfg += `add_ace group.${group.name} ${allow} allow\n`;
		}
		for (const deny of group.deny) {
			cfg += `add_ace group.${group.name} ${deny} deny\n`;
		}
		cfg += `\n`;
		for (const user of group.users) {
			cfg += `add_principal identifier.${user} group.${group.name}\n`;
		}
	});
    return cfg;
}

const requiredEnv = ["DATABASE_URL", "DATABASE_NAME", "STEAM_WEB_API_KEY", "CFX_LICENSE_KEY"];

function ensureEnv() {
	const missing = [];

	for (const env of requiredEnv) {
		if (!process.env[env]) {
			missing.push(env);
		}
	}

	if (missing.length > 0) {
		console.error(`Missing required environment variables: ${missing.join(", ")}`);
		process.exit(1);
	}
}

generateConfig();
